#Ray Wang Distant Learning Week 2 Homework


#3 STRING EXERCISES:


"""
#Exercise 1/3: String 2 - double_char

def double_char(str):
  new_string = ""
  for  char in str: 
    new_string += char * 2
  return new_string
"""
  
  
  
"""
#Exercise 2/3: String 2 - count_hi
  
def count_hi(str):
  count = 0
  for i in range(len(str)-1):
    if str[i:i+2] == "hi":
      count += 1
  return count
"""
  
  
  
"""
#Exercise 3/3: String 2 - cat_dog
  
def cat_dog(str):
  cat  = 0
  dog = 0
  for i in range(len(str) - 2):
    if str[i:i+3] == "cat":
      cat += 1
    elif str[i:i+3] == "dog":
      dog += 1
  return cat == dog
"""


#3 LIST EXERCISES:


"""
#Exercise 1/3: List 2 - count_evens

def count_evens(nums):
  count = 0
  for n in nums:
    if n % 2 == 0:
      count += 1
  return count
"""



"""
#Exercise 2/3: List 2 - has22

def has22(nums):
  for i in range(len(nums)-1):
    if nums[i] == 2 and nums[i+1] == 2:
      return True
                  
  return False
"""
  
  
  
"""
#Exercise 3/3: List 2 - sum13
  
def sum13(nums):
  s = 0
  i = 0
  while i < len(nums):
    if nums[i] == 13:
      i += 1
    else:
      s += nums[i]
    i += 1
  return s
 """
  
  
#3 LOGIC EXERCISES:
  
  
"""
#Exercise 1/3: Logic 2 - make_bricks
  
def make_bricks(small, big, goal):
  if goal >= 5 * big:
    remainder = goal - (5 * big)
  else:
    remainder = goal % 5
        
  return small >= remainder
"""
  
  
  
"""
#Exercise 2/3: Logic 2 - make_chocolate
  
def make_chocolate(small, big, goal):
  if goal >= 5 * big:
    remainder = goal - 5 * big
  else:
    remainder = goal % 5
  if remainder <= small:
    return remainder
  return -1
"""



"""
#Exercise 3/3: Logic 2 - lucky_sum

def lucky_sum(a, b, c):
  if a == 13:
    return 0
  if b == 13:
    return a
  if c == 13:
    return a + b
  return a + b + c
"""


#3 WARMUP EXERCISES:


"""
#Exercise 1/3: Warmup 2 - string_times

def string_times(str, n):
  result = ""
  for i in range(n):
    result = result + str
  return result
"""



"""
#Exercise 2/3: Warmup 2 - front_times

def front_times(str, n):
  front_len = 3
  if front_len > len(str):
    front_len = len(str)
  front = str[:front_len]
  result = ""
  for i in range(n):
    result = result + front
  return result
"""



"""
#Exercise 3/3: Warmup 2 - string_bits

def string_bits(str):
  result = ""
  for i in range(len(str)):
    if i % 2 ==0:
      result = result + str[i]
  return result
"""
